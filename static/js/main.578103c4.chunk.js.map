{"version":3,"sources":["../node_modules/n3/lib sync /^/.//N3.*$","../node_modules/encoding/lib sync","../node_modules/@trust/jose/node_modules/@trust/webcrypto/src/algorithms sync","../node_modules/@trust/webcrypto/src/algorithms sync","components/Profile.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["map","./N3Lexer","./N3Lexer.js","./N3Parser","./N3Parser.js","./N3Store","./N3Store.js","./N3StreamParser","./N3StreamParser.js","./N3StreamWriter","./N3StreamWriter.js","./N3Util","./N3Util.js","./N3Writer","./N3Writer.js","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","webpackEmptyContext","FOAF","rdf","Namespace","VCARD","Profile","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","webId","name","emails","job","bio","telephones","_this2","auth","trackSession","session","console","log","store","graph","Fetcher","load","then","any","sym","nameValue","value","each","forEach","emailBlankId","emailAddress","push","jobValue","bioValue","telephoneBlankId","telephoneNumber","setState","currentSession","login","alert","concat","logout","_this3","fetchUser","react_default","a","createElement","Container_default","Row_default","index_es","onClick","bind","React","Component","Navigation","style","padding","Navbar_default","bg","variant","fixed","Brand","Nav_default","className","react_router_dom","to","Form_default","inline","FormControl_default","type","placeholder","App","components_Navigation","react_router","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.578103c4.chunk.js","sourcesContent":["var map = {\n\t\"./N3Lexer\": 99,\n\t\"./N3Lexer.js\": 99,\n\t\"./N3Parser\": 100,\n\t\"./N3Parser.js\": 100,\n\t\"./N3Store\": 143,\n\t\"./N3Store.js\": 143,\n\t\"./N3StreamParser\": 144,\n\t\"./N3StreamParser.js\": 144,\n\t\"./N3StreamWriter\": 150,\n\t\"./N3StreamWriter.js\": 150,\n\t\"./N3Util\": 101,\n\t\"./N3Util.js\": 101,\n\t\"./N3Writer\": 104,\n\t\"./N3Writer.js\": 104\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 255;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 318;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 438;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 465;","import React from \"react\";\nimport rdf from \"rdflib\";\nimport auth from \"solid-auth-client\";\nimport { Button } from \"yoda-design-system\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nconst FOAF = new rdf.Namespace(\"http://xmlns.com/foaf/0.1/\");\nconst VCARD = new rdf.Namespace(\"http://www.w3.org/2006/vcard/ns#\");\n\nclass Profile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      webId: \"\",\n      name: \"\",\n      emails: [],\n      job: \"\",\n      bio: \"\",\n      telephones: []\n    };\n  }\n\n  fetchUser() {\n    auth.trackSession(session => {\n      if (!session) {\n        console.log(\"You are not logged in\");\n      } else {\n        console.log(\"You are logged in... Fetching your data now\");\n\n        const webId = session.webId;\n\n        const store = rdf.graph();\n        const fetcher = new rdf.Fetcher(store);\n\n        fetcher.load(webId).then(() => {\n          const name = store.any(rdf.sym(webId), FOAF(\"name\"));\n          const nameValue = name ? name.value : \"\";\n\n          var emails = [];\n          store\n            .each(rdf.sym(webId), VCARD(\"hasEmail\"))\n            .forEach(emailBlankId => {\n              store\n                .each(rdf.sym(emailBlankId), VCARD(\"value\"))\n                .forEach(emailAddress => {\n                  emails.push([emailAddress.value, emailBlankId.value]);\n                });\n            });\n\n          const job = store.any(rdf.sym(webId), VCARD(\"role\"));\n          const jobValue = job ? job.value : \"\";\n\n          const bio = store.any(rdf.sym(webId), VCARD(\"note\"));\n          const bioValue = bio ? bio.value : \"\";\n\n          var telephones = [];\n          store\n            .each(rdf.sym(webId), VCARD(\"hasTelephone\"))\n            .forEach(telephoneBlankId => {\n              store\n                .each(rdf.sym(telephoneBlankId), VCARD(\"value\"))\n                .forEach(telephoneNumber => {\n                  telephones.push([\n                    telephoneNumber.value,\n                    telephoneBlankId.value\n                  ]);\n                });\n            });\n\n          this.setState({\n            webId: webId,\n            name: nameValue,\n            emails: emails,\n            job: jobValue,\n            bio: bioValue,\n            telephones: telephones\n          });\n        });\n      }\n    });\n\t}\n\t\n\tasync login() {\n\t\tconst session = await auth.currentSession();\n\t\tif (!session)\n\t\t\tawait auth.login(\"https://solid.community\");\n\t\telse\n\t\t\talert(`Logged in as ${session.webId}`);\n\t}\n\n\tasync logout(){\n\t\tauth.logout().then(() => {\n\t\t\tthis.setState({\n\t\t\t\twebId: \"\"\n\t\t\t})\n\t\t})\n\t}\n\n  componentDidMount() {\n    this.fetchUser();\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n            {this.state.webId !== \"\" ? <Button onClick={this.logout.bind(this)}>Logout</Button> : <Button onClick={this.login.bind(this)}>Login</Button>}\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Profile;\n","import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport { NavLink } from \"react-router-dom\"; \nimport { Button } from \"yoda-design-system\";\n\nconst Navigation = () => {\n    return(\n        <div style={{padding: \"2%\"}}>\n            <Navbar bg=\"dark\" variant=\"dark\" fixed=\"top\">\n                <Navbar.Brand></Navbar.Brand>\n                <Nav className=\"mr-auto\">\n                    <NavLink to=\"/\">Profile</NavLink>\n                </Nav>\n                <Form inline>\n                    <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n                    <Button>Search</Button>\n                </Form>\n            </Navbar>\n        </div>\n    );\n};\n\nexport default Navigation; ","import React from 'react';\nimport { BrowserRouter, Route, Switch} from \"react-router-dom\"\nimport Profile from \"./components/Profile\";\nimport Navigation from \"./components/Navigation\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <BrowserRouter>\n      <div>\n        <Navigation/>\n        <Switch>\n          <Route path=\"/\" component= {Profile} exact/>\n        </Switch>  \n      </div>\n    </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}